---
AWSTemplateFormatVersion: 2010-09-09

Description:
 This is the template stack for the creation of APIGW and Lambda
#--------------------Metadata Block-------------------------------
Metadata:
  AWS::CloudFormation::Interface:
   ParameterGroups:
    - 
      Label:
        default: "APIGW Configuration"
      Parameters:
        - APIGWHttpMethodTypes
        - APIGWIntegrationType
        - APIGWPathPart
    - 
      Label:
        default: "Lambda Configuration"
      Parameters:
        - LambdaRuntime

#------------------------Parameter Block----------------------
Parameters:
 APIGWHttpMethodTypes:
  Type: String
  Default: GET
  AllowedValues:
    - GET
    - POST
    - PUT
 APIGWIntegrationType:
  Type: String
  Default: MOCK
  AllowedValues:
    - MOCK
    - HTTP
    - AWS
 APIGWPathPart:
  Type: String
   

 LambdaRuntime:
  Type: String
  Default: nodejs20.x
  AllowedValues:
    - nodejs20.x
    - Python 3.13
    - .NET 8 (C#/F#/PowerShell)
  
#---------------------------Resource Block-------------------------

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-api-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AryanLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AryanApiGateway}/*/GET/hello
  AryanLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CF-Lambda 
      Runtime: !Ref LambdaRuntime  #<----- Paramter Selection
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
           exports.handler = async (event) => {
            const response = {
              statusCode: 200,
              body: JSON.stringify('Hello from Lambda!'),
            };
            return response;
           };


  AryanApiGateway:  #<------ Logical Identification ID of Resource
    Type: AWS::ApiGateway::RestApi   #<------ Resoucre Name
    Properties:   #<----- Properties for the API Gateway
      Name: Testing-API
      Description: This is an sample APIGW
  APIGWResource:
    Type:  AWS::ApiGateway::Resource 
    Properties:
      ParentId: !GetAtt AryanApiGateway.RootResourceId
      PathPart: !Ref APIGWPathPart
      RestApiId: !Ref AryanApiGateway
  APIGWMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AryanApiGateway
      ResourceId: !Ref APIGWResource
      AuthorizationType: NONE
      HttpMethod: !Ref APIGWHttpMethodTypes  #<----- Paramter Selection
      Integration:
        Type: AWS_PROXY # For Lambda proxy integration
        IntegrationHttpMethod: POST # Always POST for Lambda proxy integration
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AryanLambdaFunction.Arn}/invocations 


  
      

  
